// Definición de pines para segmentos y botones
#define A 12
#define B 13
#define F 11
#define G 10
#define E 9
#define D 8
#define C 7
#define SUBE 4
#define BAJA 3
#define RESET 5
#define UNIDAD A4
#define DECENA A5
#define APAGADOS 0
#define TIMEDISPLAYON 10
#define INTERRUPTOR 2

// Variables para el contador, botones y estado del interruptor
int countDigit = 0;
int sube = 1;
int estadoSube = 1;
int baja = 1;
int estadoBaja = 1;
int reset = 1;
int estadoReset = 1;
int interruptor = 0;
bool primo = false;

void setup() {
  // Configuración de pines de entrada/salida
  pinMode(BAJA, INPUT_PULLUP);
  pinMode(SUBE, INPUT_PULLUP);
  pinMode(RESET, INPUT_PULLUP);
  
  pinMode(C, OUTPUT);
  pinMode(D, OUTPUT);
  pinMode(E, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(F, OUTPUT);
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);

  // Inicializa el display mostrando el número 0
  printDigit(0, primo);
}

void loop() {
  // Comprueba si se ha presionado algún botón (SUBE, BAJA o RESET)
  int pressed = keypressed();
  if (pressed == SUBE) {
    // Incrementa el contador
    countDigit++;
    if (countDigit > 99)
      countDigit = 0; // Vuelve a 0 cuando llega a 99
  } else if (pressed == BAJA) {
    // Decrementa el contador
    countDigit--;
    if (countDigit < 0)
      countDigit = 99; // Vuelve a 99 cuando es menor que 0
  } else if (pressed == RESET) {
    // Reinicia el contador a 0
    countDigit = 0;
  }
  
  // Muestra el valor del contador en el display
  printCount(countDigit);
}

void printDigit(int digit, bool primo)
{
  interruptor = digitalRead(INTERRUPTOR);
  digitalWrite(A, LOW);
  digitalWrite(B, LOW);
  digitalWrite(C, LOW);
  digitalWrite(D, LOW);
  digitalWrite(E, LOW);
  digitalWrite(F, LOW);
  digitalWrite(G, LOW);
  switch(digit)
    //Prende las luces segun el numero recibido desde
    //la funcion printCount()
  {
    case 0:
    {
      if(interruptor==0)
      {
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(F, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(C, HIGH);
        break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 1:
    {
      if(interruptor==0)
      {
        digitalWrite(B, HIGH);
        digitalWrite(C, HIGH);
        break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(B, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 2:
    {
      if(interruptor==0)
      {
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(E, HIGH);
        digitalWrite(D, HIGH);
        break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      break;
      }
    }
    case 3:
    {
      if(interruptor==0)
      {
        digitalWrite(A, HIGH);
        digitalWrite(B, HIGH);
        digitalWrite(G, HIGH);
        digitalWrite(D, HIGH);
        digitalWrite(C, HIGH);
        break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 4:
    {
      if(interruptor==0)
      {
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 5:
    {
      if(interruptor==0)
      {
      digitalWrite(A, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 6:
    {
      if(interruptor==0)
      {
      digitalWrite(A, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 7:
    {
      if(interruptor==0)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 8:
    {
      if(interruptor==0)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(E, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
    case 9:
    {
      if(interruptor==0)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
      else if(interruptor==1 && primo == true)
      {
      digitalWrite(A, HIGH);
      digitalWrite(B, HIGH);
      digitalWrite(F, HIGH);
      digitalWrite(G, HIGH);
      digitalWrite(D, HIGH);
      digitalWrite(C, HIGH);
      break;
      }
    }
  }
}

void prendeDigito(int digito)
{
  if(digito==DECENA)
  {
    digitalWrite(UNIDAD, LOW);
    digitalWrite(DECENA, HIGH);
    delay(TIMEDISPLAYON);
  }
  else if(digito==UNIDAD)
  {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, LOW);
    delay(TIMEDISPLAYON);
  }
  else
  {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, HIGH);
  }
}

void printCount(int count)
  //recibe como valor el contador (countDigit)
{
  primo = esPrimo(count);
  prendeDigito(APAGADOS);
  printDigit(count/10, primo); //calcula la decena
  prendeDigito(UNIDAD);
  prendeDigito(APAGADOS);
  printDigit(count - 10*((int)count/10),primo);//calcula la unidad
  prendeDigito(DECENA);
}

int keypressed(void) {
  // Lee el estado de los botones SUBE, BAJA y RESET
  sube = digitalRead(SUBE);
  baja = digitalRead(BAJA);
  reset = digitalRead(RESET);
  
  // Actualiza el estado de los botones
  if (sube)
    estadoSube = 1;
  if (baja)
    estadoBaja = 1;
  if (reset)
    estadoReset = 1;
  
  // Comprueba si se ha presionado algún botón y retorna su valor
  if (sube == 0 && sube != estadoSube) {
    estadoSube = sube;
    return SUBE;
  }
  if (baja == 0 && baja != estadoBaja) {
    estadoBaja = baja;
    return BAJA;
  }
  if (reset == 0 && reset != estadoReset) {
    estadoReset = reset;
    return RESET;
  }
  return 0; // No se presionó ningún botón
} 

bool esPrimo(int digit) {
  int i = 2;
  // Inicializa i en 2, el número más bajo para verificar si digit es primo.

  if (digit == 1 || digit == 0) {
    // Si digit es igual a 0 o 1, no es un número primo.
    primo = false;
  } else {
    // En otros casos, asumimos que digit es primo y verificamos.
    primo = true;
    for (i; i < digit; i++) {
      // Comienza un bucle para verificar divisibilidad por todos los números desde 2 hasta digit - 1.
      if (digit % i == 0) {
        // Si digit es divisible por i, entonces no es primo.
        primo = false;
      }
    }
  }
  delay(TIMEDISPLAYON);
  // Agrega un pequeño retraso para que se pueda visualizar el resultado en el display.
  return primo;
}

